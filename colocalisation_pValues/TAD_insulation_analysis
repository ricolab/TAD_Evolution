################################
##### 2020-05-21
################################

readTablesInFolder = function(myFolder, myPattern = "*.*") {
    allFiles = dir(myFolder, myPattern)
    
    fullTable = data.frame()
    for (thisFile in allFiles) {
		print(file.path(myFolder, thisFile))
        subTable = read.table(file.path(myFolder, thisFile), header = FALSE, sep = "\t")
        fullTable = rbind(fullTable, subTable)
        }
    
    return(fullTable)
    }

################################################
############## start region from TADAvg_analysis
################################################

# block of functions extracted from the colocalisation analysis

library(ggplot2)
library(wikifacts)

getTADGenesTable = function(myGenes, myTADs) {
	feedbackLoop = 1000
	# all.equal(newTADList_old, newTADList) gives true
	# without doing this stack thing, it took 6:15
	# using stacks of 3000, it takes 1:17 to do the same
	# using stacks of 100, it takes 1:13
	stackSize = 100
	TADGenesTable = data.frame()
	TADGenesTableStack = data.frame()
	geneDistribution = c()
	for (i in 1:nrow(myGenes)) {
	#for (i in 1:3000) {
		if (i %% feedbackLoop == 0) print(paste0("Checking gene #", i, "/", nrow(myGenes)))
		if (i %% (feedbackLoop * 10) == 0) print(wiki_randomfact())
		row = myGenes[i,]
		mySubset = subset(myTADs, myTADs$end > row$start_position & myTADs$start < row$end_position & myTADs$chr == row$chromosome_name)
		geneDistribution = c(geneDistribution, nrow(mySubset))
		if (nrow(mySubset) == 1) {
			newRow = cbind(row, mySubset[, 1:3], paste(mySubset[1,1], mySubset[1,2], mySubset[1,3], sep = "_"))
			TADGenesTableStack = rbind(TADGenesTableStack, newRow)
			}
			
		if (i %% stackSize == 0 | i == nrow(myGenes)) {
			TADGenesTable = rbind(TADGenesTable, TADGenesTableStack)
			TADGenesTableStack = data.frame()
			}
		}
		
		for (j in 0:max(geneDistribution)) print(paste0("There are ", sum(geneDistribution == j), " genes present in exactly ", j, " TADs (", round(sum(geneDistribution == j) / length(geneDistribution) * 100, 2), "%)."))
		
		colnames(TADGenesTable) = c("ensembl_gene_id", "wikigene_name", "gene_chr", "gene_start", "gene_end", "gene_biotype", "tad_chr", "tad_start", "tad_end", "tad_id")
		
		return(TADGenesTable)
	}
	
mergeGeneTADAge = function(myGeneTADs, myGeneAges) {
	
	colnames(myGeneAges) = c("ensembl_gene_id", colnames(myGeneAges)[2:6])
	gene_age = c()
	for (i in 1:nrow(myGeneTADs)) {
		# if there are repeated ensembl_gene_id elements, this will give problems
		thisAge = as.character(subset(myGeneAges, as.character(ensembl_gene_id) == myGeneTADs[i, 1])[1,"GeneAge"])
		if (is.na(thisAge)) thisAge = "No Age Provided"
		gene_age = c(gene_age, thisAge)
		}

	geneTADAge = cbind(myGeneTADs, gene_age)
	return(geneTADAge)
	}
	
ngene = function(myTable, myTADid) {
	TADrows = unique(subset(myTable, tad_id == myTADid))
	return(nrow(TADrows))
	}
	
interTADRemover = function(myTADs, myChromosomes) {
	
	# indices for myChromosomes
	CHROMINDEX = 1
	CENTROMEREINDEX = 2
	CHRENDINDEX = 3
	
	# indices for myTAD
	CHROMINDEX = 1
	STARTINDEX = 2
	ENDINDEX = 3
	TADNAMEINDEX = 4
	
	chromList = myChromosomes[,CHROMINDEX]
	
	newTADs = vector()
	for (chromNum in 1:length(chromList)) {
		thisChrom = chromList[chromNum]
		thisChromNoPrefix = substr(thisChrom, 4, 5)
		
		print(paste0("Working on ", thisChrom, "..."))
		TADsubset = as.data.frame(subset(myTADs, paste0("chr", chr) == thisChrom))
		if (nrow(TADsubset) > 0) {
			
			startingPoint = 0
			for (i in 1:nrow(TADsubset)) {
				
				TADName = paste0("Original tad_id = ", TADsubset$chr[[i]], "_", TADsubset$start[[i]], "_", TADsubset$end[[i]])
				
				if (i < nrow(TADsubset)) endingPoint = floor((TADsubset$end[[i]] + TADsubset$start[[i + 1]]) / 2)
				else endingPoint = as.numeric(as.character(subset(as.data.frame(myChromosomes), chrom == thisChrom)$end))
				
				newRow = c(chr = thisChromNoPrefix, start = startingPoint, end = endingPoint, TAD = TADName, length = endingPoint - startingPoint)
				
				newTADs = rbind(newTADs, newRow)
				
				startingPoint = endingPoint
				
				}
			
			}
		else print(paste0("Warning: no TADs for ", thisChrom, ", removing..."))
		}
		
			
	rownames(newTADs) = NULL
	newTADs = as.data.frame(newTADs)
	newTADs$chr = as.character(newTADs$chr)
	newTADs$start = as.numeric(as.character(newTADs$start))
	newTADs$end = as.numeric(as.character(newTADs$end))
	newTADs$TAD = as.character(as.character(newTADs$TAD))
	newTADs$length = as.numeric(as.character(newTADs$length))
	return(newTADs)
	
	}

fusedTAD = function(myTADs, myChromosomes) {
# forked from version of 12dic-2019
# note: this algorithm removes the interTAD regions
	
	# indices for myChromosomes
	CHROMINDEX = 1
	CENTROMEREINDEX = 2
	CHRENDINDEX = 3
	
	# indices for myTAD
	CHROMINDEX = 1
	STARTINDEX = 2
	ENDINDEX = 3
	TADNAMEINDEX = 4
	
	chromList = myChromosomes[,CHROMINDEX]
	
	newTADs = vector()
	for (chromNum in 1:length(chromList)) {
		thisChrom = chromList[chromNum]
		thisChromNoPrefix = substr(thisChrom, 4, 5)
		
		print(paste0("Working on ", thisChrom, "..."))
		TADsubset = as.data.frame(subset(myTADs, paste0("chr", chr) == thisChrom))
		if (nrow(TADsubset) > 0) {
		
			startingPoint = 0
			previousTAD = paste0("beginning of ", thisChrom)
			for (i in 1:nrow(TADsubset)) {
				# print(paste0(thisChrom, ":", TADsubset$start[[i]], "-", TADsubset$end[[i]]))
				cuttingPoint = floor((TADsubset$start[[i]] + TADsubset$end[[i]]) / 2)
				nextTAD = paste0(as.character(TADsubset[i, CHROMINDEX]), "_", as.character(TADsubset[i, STARTINDEX]), "_", as.character(TADsubset[i, ENDINDEX]))
				previousTADMessage = previousTAD
				nextTADMessage = nextTAD
				if (previousTAD != paste0("beginning of ", thisChrom)) previousTADMessage = paste0("second half of ", previousTADMessage)
				if (nextTAD != paste0("ending of ", thisChrom)) nextTADMessage = paste0("first half of ", nextTADMessage)
				newRow = c(chr = thisChromNoPrefix, start = startingPoint, end = cuttingPoint, TAD = paste0(previousTADMessage, " & ", nextTADMessage), length = cuttingPoint - startingPoint)
				
				newTADs = rbind(newTADs, newRow)
				
				previousTAD = nextTAD
				startingPoint = cuttingPoint
				}
				
			# now adding last half TAD
				cuttingPoint = as.numeric(as.character(subset(as.data.frame(myChromosomes), chrom == thisChrom)$end))
				nextTAD = paste0("ending of ", thisChrom)
				previousTADMessage = previousTAD
				nextTADMessage = nextTAD
				if (previousTAD != paste0("beginning of ", thisChrom)) previousTADMessage = paste0("second half of ", previousTADMessage)
				if (nextTAD != paste0("ending of ", thisChrom)) nextTADMessage = paste0("first half of ", nextTADMessage)
				newRow = c(chr = thisChromNoPrefix, start = startingPoint, end = cuttingPoint, TAD = paste0(previousTADMessage, " & ", nextTADMessage), length = cuttingPoint - startingPoint)
				
				newTADs = rbind(newTADs, newRow)
		}
		else print(paste0("Warning: no TADs for ", thisChrom, ", removing..."))
		
		}
		
	rownames(newTADs) = NULL
	newTADs = as.data.frame(newTADs)
	newTADs$chr = as.character(newTADs$chr)
	newTADs$start = as.numeric(as.character(newTADs$start))
	newTADs$end = as.numeric(as.character(newTADs$end))
	newTADs$TAD = as.character(as.character(newTADs$TAD))
	newTADs$length = as.numeric(as.character(newTADs$length))
	return(newTADs)
	
	}

makeAllOneHugeTAD = function(myTable, hugeTADName = "hugeTAD") {
	newTable = myTable
	newTable$tad_id = hugeTADName
	
	return(newTable)
	}
	
randomiseAllAges = function(myTable) {
	newTable = myTable
	myAges = as.character(myTable$gene_age)
	scramblingTable = as.data.frame(cbind(myAges, runif(length(myAges))))
	colnames(scramblingTable) = c("gene_age", "rnd")
	scramblingTable = scramblingTable[order(scramblingTable$rnd),]
	newTable$gene_age = scramblingTable$gene_age
	
	return(newTable)
	}
	

getTADAgeList = function(myGeneTADAgeTable, ageEquival) {
	
	# using merge here is overkill, because I just want to bring the avgMy
	myGeneTADAgeTable$avgMy = ageEquival$avgMy[match(myGeneTADAgeTable$gene_age, ageEquival$age)]
	allTADs = as.data.frame(sort(as.character(unique(myGeneTADAgeTable$tad_id))))
	colnames(allTADs) = "tad_id"
	allTADs$tad_chr = NA
	allTADs$tad_start = NA
	allTADs$tad_end = NA
	allTADs$meanAge = NA

	for(i in 1:nrow(allTADs)) {
		allTADs[i, "meanAge"] = mean(subset(myGeneTADAgeTable, as.character(tad_id) == allTADs[i, "tad_id"])[, "avgMy"])
		allTADs[i, "tad_chr"] = as.character(subset(myGeneTADAgeTable, as.character(tad_id) == allTADs[i, "tad_id"])[1, "tad_chr"])
		allTADs[i, "tad_start"] = subset(myGeneTADAgeTable, as.character(tad_id) == allTADs[i, "tad_id"])[1, "tad_start"]
		allTADs[i, "tad_end"] = subset(myGeneTADAgeTable, as.character(tad_id) == allTADs[i, "tad_id"])[1, "tad_end"]
		}

	allTADs = allTADs[with(allTADs, order(tad_chr, tad_start, tad_end)),]
	rownames(allTADs) = NULL
	
	return(allTADs)
	}

getJumpList = function(myList, column) {
	
	# should be sorted already, but just in case...
	myList = myList[with(myList, order(tad_chr, tad_start, tad_end)),]
	
	jumpList = vector()
	for (i in 1:(nrow(myList) - 1)) {
		
		if (myList[i + 1, "tad_chr"] == myList[i, "tad_chr"]) {
			thisJump = abs(myList[i + 1, column] - myList[i, column])
			thisRow = c(chr = myList[i, "tad_chr"], jump = thisJump)
			jumpList = rbind(jumpList, thisRow)
			}
		}
	
	jumpList = as.data.frame(jumpList)
	colnames(jumpList) = c("chr", "jump")
	rownames(jumpList) = NULL
	jumpList$chr = as.character(jumpList$chr)
	jumpList$jump = as.numeric(as.character(jumpList$jump))
	
	return(jumpList)
	
	}
	
saveTADAgeGraphs = function(data, folder, filePrefix = "meanAge", fileSuffix = "", chromosomes = c(1:22, "X", "Y"), ymax = 800) {
	
	if (fileSuffix != "") fileSuffix = paste0("_", fileSuffix)
	
	for(chrom in chromosomes) {
		thisPlot = ggplot(subset(data, tad_chr == chrom), aes(ymin = 0, fill = factor(floor(3 * (meanAge - 0.1) / max(meanAge))))) + geom_rect(aes(ymax = meanAge, xmin = tad_start, xmax = tad_end)) + labs(x = paste0("TAD position in chr", chrom), y = "mean age of TAD in Ma", title = paste0("chr", chrom)) + theme(legend.position = "none", plot.title = element_text(size = 28, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 20, family = "Ubuntu"), axis.title.y = element_text(size = 20, family = "Ubuntu")) + ylim(0, ymax)
		
		ggsave(paste0(folder, filePrefix, "_chr", chrom, fileSuffix, ".png"), plot = thisPlot, height = 5, width = 12, dpi = 300, units = "in")
		}
	}

generateRegularTADList = function(chromosomes, size = 500000) {
	
	finalList = data.frame()
	for (i in 1:nrow(chromosomes)) {
		chromStr = chromosomes[i, "chrom"]
		chrom = substr(chromStr, 4, nchar(chromStr))
		chromEnd = as.numeric(chromosomes[i, "end"])
		
		startPosition = 0
		while (startPosition <= chromEnd - size) {
			
			thisRow = c(chrom, startPosition, startPosition + size - 1)
			finalList = rbind(finalList, t(as.data.frame(thisRow)))
			startPosition = startPosition + size
			}
			
		if (startPosition > chromEnd - size) {
			thisRow = c(chrom, startPosition, chromEnd)
			finalList = rbind(finalList, t(as.data.frame(thisRow)))
			}
		
		}
	
	rownames(finalList) = NULL
	colnames(finalList) = c("chr", "start", "end")
	finalList$chr = as.character(unlist(finalList$chr))
	finalList$start = as.numeric(as.character(unlist(finalList$start)))
	finalList$end = as.numeric(as.character(unlist(finalList$end)))
	
	return(finalList)
	
	}
	
################################################

# making chromosomes:

# to get centromere positions for human:
# go to http://genome.ucsc.edu/cgi-bin/hgTables
# choose assembly:"Feb. 2009 (GRCh37/hg19)" group:"All Tables" -> table:gap
# click on "get output"
# telomeres are coincidental with Caelinn's data, so I assume we are using the correct assembly
# filter centromeres are as gap "type"

# to get centromere positions for mouse:
# go to http://genome.ucsc.edu/cgi-bin/hgTables
# genome: Mouse
# choose assembly:"Dec. 2011 (GRCm38/mm10)" group:"All Tables" -> table:gap
# click on "get output"
# telomeres are coincidental with Caelinn's data, so I assume we are using the correct assembly
# filter centromeres are as gap "type"

centromerePositions_hg19 = as.data.frame(read.table(header = TRUE, sep = ",", text = "
chrom,centromere
chr1,121535434
chr2,92326171
chr3,90504854
chr4,49660117
chr5,46405641
chr6,58830166
chr7,58054331
chr8,43838887
chr9,47367679
chrX,58632012
chrY,10104553
chr10,39254935
chr11,51644205
chr12,34856694
chr13,16000000
chr14,16000000
chr15,17000000
chr16,35335801
chr17,22263006
chr18,15460898
chr19,24681782
chr20,26369569
chr21,11288129
chr22,13000000
"))

# for some reason, the ucsc website does not provide
# the end telomere of chr17, so I paste it here from Caelinn's list
endTelomerePositions_hg19 = as.data.frame(read.table(header = TRUE, sep = ",", text = "
chrom,end
chr1,249240621
chr2,243189373
chr3,198012430
chr4,191144276
chr5,180905260
chr6,171105067
chr7,159128663
chr8,146354022
chr9,141203431
chrX,155260560
chrY,59363566
chr10,135524747
chr11,134996516
chr12,133841895
chr13,115159878
chr14,107339540
chr15,102521392
chr16,90344753
chr17,81195210
chr18,78067248
chr19,59118983
chr20,63015520
chr21,48119895
chr22,51294566
"))


# no centromere for mouse chrY, so I give it the same value as for all others
centromerePositions_mm10 = as.data.frame(read.table(header = TRUE, sep = ",", text = "
chrom,centromere
chr1,110000
chr2,110000
chr3,110000
chr4,110000
chr5,110000
chr6,110000
chr7,110000
chr8,110000
chr9,110000
chrX,110000
chrY,110000
chr10,110000
chr11,110000
chr12,110000
chr13,110000
chr14,110000
chr15,110000
chr16,110000
chr17,110000
chr18,110000
chr19,110000
"))

endTelomerePositions_mm10 = as.data.frame(read.table(header = TRUE, sep = ",", text = "
chrom,end
chr1,195371971
chr2,182013224
chr3,159939680
chr4,156408116
chr5,151734684
chr6,149636546
chr7,145341459
chr8,129301213
chr9,124495110
chrX,170931299
chrY,91644698
chr10,130594993
chr11,121982543
chr12,120029022
chr13,120321639
chr14,124802244
chr15,103943685
chr16,98107768
chr17,94887271
chr18,90602639
chr19,61331566
"))

chromosomes_hg19 = vector()
for (i in 1:nrow(centromerePositions_hg19)) {
	myChrom = paste0(centromerePositions_hg19[i,]$chrom)
	myCentromere = centromerePositions_hg19[i,]$centromere
	myEnd = subset(endTelomerePositions_hg19, chrom == myChrom)$end
	chromosomes_hg19 = rbind(chromosomes_hg19, c(chrom = myChrom, centromere = myCentromere, end = myEnd))
	}
	
chromosomes_mm10 = vector()
for (i in 1:nrow(centromerePositions_mm10)) {
	myChrom = paste0(centromerePositions_mm10[i,]$chrom)
	myCentromere = centromerePositions_mm10[i,]$centromere
	myEnd = subset(endTelomerePositions_mm10, chrom == myChrom)$end
	chromosomes_mm10 = rbind(chromosomes_mm10, c(chrom = myChrom, centromere = myCentromere, end = myEnd))
	}
	
################################################ functions for essentiality

getGeneEssentialityTable = function(geneList, essentialGenes) {
	
	# ensemble_gene_id = igual
	# HUGO_symbol -> "-"
	# seqnames = chromosome_name
	# start -> start_position
	# end -> end_position
	# GeneAge -> essentiality
	
	geneEssList = cbind(ensembl_gene_id = geneList[,"ensembl_gene_id"], HUGO_symbol = "-", seqnames = geneList[,"chromosome_name"], start = geneList[,"start_position"], end = geneList[,"end_position"], GeneAge = "nonEssential")
	geneEssList = as.data.frame(geneEssList, stringsAsFactors = FALSE)
	for (i in 1:nrow(essentialGenes)) {
		if (i %% 1000 == 0) print(paste0("Checked ", i, "/", nrow(essentialGenes), " rows."))
		
		thisGene = essentialGenes[i,1]
		geneEssList[geneEssList$ensembl_gene_id == thisGene, "GeneAge"] = "essential"
		}

	rownames(geneEssList) = NULL
	return(geneEssList)
	
	}
	
################################################
################################################

ageList = as.data.frame(read.table(header = TRUE, text = "
age
FungiMetazoa
Bilateria
Chordata
Euteleostomi
Sarcopterygii
Tetrapoda
Amniota
Mammalia
Theria
Eutheria
Simiiformes
Catarrhini
Hominoidea
Hominidae
HomoPanGorilla
HomoSapiens
"))

ageListMouse = as.data.frame(read.table(header = TRUE, text = "
age
FungiMetazoa
Bilateria
Chordata
Euteleostomi
Sarcopterygii
Tetrapoda
Amniota
Mammalia
Theria
Eutheria
Glires
Rodentia
Sciurognathi
Murinae
Mus.musculus
"))

################################################
################################################

ageEquivalencies = as.data.frame(read.table(header = TRUE, sep = ",", text = "
age,maxMy,minMy,avgMy
FungiMetazoa,1200,570,885
Bilateria,570,540,555
Chordata,540,430,485
Euteleostomi,430,420,425
Sarcopterygii,420,340,380
Tetrapoda,340,320,330
Amniota,320,180,250
Mammalia,180,160,170
Theria,160,90,125
Eutheria,90,40,65
Simiiformes,40,25,32.5
Catarrhini,25,18,21.5
Hominoidea,18,14,16
Hominidae,14,8,11
HomoPanGorilla,8,0.5,4.25
HomoSapiens,0.5,0,0.25
Glires,72.6,67.4,70
Rodentia,67.4,24,45.7
Sciurognathi,24,24,24
Murinae,24,3.35,13.675
Mus.musculus,3.35,0,1.675
"))

ageEquivalencies_binary = as.data.frame(read.table(header = TRUE, sep = ",", text = "
age,maxMy,minMy,avgMy
FungiMetazoa,3,3,3
Bilateria,3,3,3
Chordata,3,3,3
Euteleostomi,3,3,3
Sarcopterygii,1,1,1
Tetrapoda,1,1,1
Amniota,1,1,1
Mammalia,1,1,1
Theria,1,1,1
Eutheria,1,1,1
Simiiformes,1,1,1
Catarrhini,1,1,1
Hominoidea,1,1,1
Hominidae,1,1,1
HomoPanGorilla,1,1,1
HomoSapiens,1,1,1
Glires,1,1,1
Rodentia,1,1,1
Sciurognathi,1,1,1
Murinae,1,1,1
Mus.musculus,1,1,1
"))

essEquivalencies_binary = as.data.frame(read.table(header = TRUE, sep = ",", text = "
age,maxMy,minMy,avgMy
essential,3,3,3
nonEssential,1,1,1
"))

ageEquivalencies_ranking = as.data.frame(read.table(header = TRUE, sep = ",", text = "
age,maxMy,minMy,avgMy
FungiMetazoa,16,16,16
Bilateria,15,15,15
Chordata,14,14,14
Euteleostomi,13,13,13
Sarcopterygii,12,12,12
Tetrapoda,11,11,11
Amniota,10,10,10
Mammalia,9,9,9
Theria,8,8,8
Eutheria,7,7,7
Simiiformes,6,6,6
Catarrhini,5,5,5
Hominoidea,4,4,4
Hominidae,3,3,3
HomoPanGorilla,2,2,2
HomoSapiens,1,1,1
Glires,5,5,5
Rodentia,4,4,4
Sciurognathi,3,3,3
Murinae,2,2,2
Mus.musculus,1,1,1
"))


################################################
################ end region from TADAvg_analysis
################################################

################################################
################################################
################################################ hESC zone
################################################
################################################


################################################
################################################ prueba usando neu con ensembl de apr2020
################################################

library("biomaRt")
ensembl75 = useMart(host='feb2014.archive.ensembl.org',
						biomart='ENSEMBL_MART_ENSEMBL',
						dataset='hsapiens_gene_ensembl')
allBioMartHuman = getBM(mart = ensembl75, attributes = c("ensembl_gene_id", "wikigene_name", "chromosome_name", "start_position", "end_position", "gene_biotype"))

thisFolder = "/mnt/sexreg/temporal/geneage/"

sampleTADFile = paste0(thisFolder, "TADs_Neu_mean_merged.bed")
# sampleAgeFile = paste0(thisFolder, "pgen.1007902.s021.tsv") # old, given by Daniel, with no chrX
sampleAgeFile = paste0(thisFolder, "AgesWithChrX.tsv") # converted from Caelinn's file in /data
TADList = as.data.frame(read.table(sampleTADFile, header = TRUE))
geneAgeList = as.data.frame(read.table(sampleAgeFile, header = TRUE, sep = "\t"))
colnames(geneAgeList) = c("ensembl_gene_id", colnames(geneAgeList)[2:6])
geneAgeList = geneAgeList[,1:6]

newTADList = getTADGenesTable(allBioMartHuman, TADList)
geneTADAgeTable = mergeGeneTADAge(newTADList, geneAgeList)
geneTADAgeTableAgeOnly = subset(geneTADAgeTable, gene_age != "No Age Provided")
geneTADAgeTableAgeOnlyNoDups = geneTADAgeTableAgeOnly[!duplicated(geneTADAgeTableAgeOnly[, "ensembl_gene_id"]),]


# get a list {chromosome, TAD id, average age of contained genes in My}
TADAgeList = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies)

############## ranking analysis
# youngest = 1, oldest = 16

TADAgeList_ranking = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies_ranking)
ageJumpList_ranking = getJumpList(TADAgeList_ranking, column = "meanAge")
# ggplot(ageJumpList_ranking, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = 20) + geom_density(alpha = 0.2, fill = "#40ff40")

saveTADAgeGraphs(TADAgeList_ranking, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "ranking_neu_ensembl_apr2020", fileSuffix = "real", ymax = 16.2)

############## binary analysis
############## everything before Sarcopterygii = 3
############## everything after (included Sarcopterygii) = 1
# note: I didn't use {0,1} because this way it was difficult to tell the difference between empty and young TADs

TADAgeList_binary = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies_binary)
ageJumpList_binary = getJumpList(TADAgeList_binary, column = "meanAge")
ggplot(ageJumpList_binary, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = 20) + geom_density(alpha = 0.2, fill = "#40ff40")

saveTADAgeGraphs(TADAgeList_binary, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_neu_ensembl_apr2020", fileSuffix = "real", ymax = 3.2)


################################################
################################################ usando hESC de Caelinn
################################################




hESCTADs = read.table("/mnt/sexreg/ChromHMM/TADs/tsv/hESCTADs.tsv")
hESCTADs$chr = substr(hESCTADs$chr, 4, length(hESCTADs$chr) - 3)


library("biomaRt")
#ensembl75 = useMart(host='feb2014.archive.ensembl.org',
ensembl75 = useMart(host='apr2020.archive.ensembl.org',
						biomart='ENSEMBL_MART_ENSEMBL',
						dataset='hsapiens_gene_ensembl')
allBioMartHuman = getBM(mart = ensembl75, attributes = c("ensembl_gene_id", "wikigene_name", "chromosome_name", "start_position", "end_position", "gene_biotype"))

thisFolder = "/mnt/sexreg/temporal/geneage/"

sampleAgeFile = paste0(thisFolder, "AgesWithChrX.tsv") # converted from Caelinn's file in /data
geneAgeList = as.data.frame(read.table(sampleAgeFile, header = TRUE, sep = "\t"))
colnames(geneAgeList) = c("ensembl_gene_id", colnames(geneAgeList)[2:6])
geneAgeList = geneAgeList[,1:6]

newTADList = getTADGenesTable(allBioMartHuman, hESCTADs)

geneTADAgeTable = mergeGeneTADAge(newTADList, geneAgeList)
geneTADAgeTableAgeOnly = subset(geneTADAgeTable, gene_age != "No Age Provided")
geneTADAgeTableAgeOnlyNoDups = geneTADAgeTableAgeOnly[!duplicated(geneTADAgeTableAgeOnly[, "ensembl_gene_id"]),]


# get a list {chromosome, TAD id, average age of contained genes in rank}
TADAgeList = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies)

############## binary analysis
############## everything before Sarcopterygii = 3
############## everything after (included Sarcopterygii) = 1
# note: I didn't use {0,1} because this way it was difficult to tell the difference between empty and young TADs

TADAgeList_binary = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies_binary)
ageJumpList_binary = getJumpList(TADAgeList_binary, column = "meanAge")
ggplot(ageJumpList_binary, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = 20) + geom_density(alpha = 0.2, fill = "#40ff40")

# saveTADAgeGraphs(TADAgeList_binary, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_hESC_ensembl_apr2020", fileSuffix = "real", ymax = 3.2)


# compare with randomisation of ages
for (i in 1:5) {
	print(paste0("Generating randomisation #", i, "."))
	TADAgeList_binary_rnd = getTADAgeList(randomiseAllAges(geneTADAgeTableAgeOnlyNoDups), ageEquivalencies_binary)
	ageJumpList_binary_rnd = getJumpList(TADAgeList_binary_rnd, column = "meanAge")
	print(paste0("Saving randomisation #", i, "."))
	# saveTADAgeGraphs(TADAgeList_binary_rnd, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_hESC_ensembl_apr2020", fileSuffix = paste0("rnd0", i), ymax = 3.2)
	}

TADList_regular500 = generateRegularTADList(chromosomes_hg19, size = 500000)	
newTADList_regular500 = getTADGenesTable(allBioMartHuman, TADList_regular500)
geneTADAgeTable_regular500 = mergeGeneTADAge(newTADList_regular500, geneAgeList)
geneTADAgeTableAgeOnly_regular500 = subset(geneTADAgeTable_regular500, gene_age != "No Age Provided")
geneTADAgeTableAgeOnlyNoDups_regular500 = geneTADAgeTableAgeOnly_regular500[!duplicated(geneTADAgeTableAgeOnly_regular500[, "ensembl_gene_id"]),]

# compare with jumps for different regular windows of 500000 bases
TADAgeList_binary_regular500 = getTADAgeList(geneTADAgeTableAgeOnlyNoDups_regular500, ageEquivalencies_binary)
ageJumpList_binary_regular500 = getJumpList(TADAgeList_binary_regular500, column = "meanAge")
# saveTADAgeGraphs(TADAgeList_binary_regular500, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_hESC_ensembl_apr2020", fileSuffix = "reg500", ymax = 3.2)

# jump plots binary
nbins = 100;
thisPlot_binary_real = ggplot(ageJumpList_binary, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = nbins) + geom_density(alpha = 0.2, fill = "#4060ff") + ylim(0, 2.5) + xlim(0, 2.2) + labs(x = "TAD age jump (bin)", y = "Distribution density", title = "TAD age jump (binary) in contiguous TADs (real)") + theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 12, family = "Ubuntu"), axis.title.y = element_text(size = 12, family = "Ubuntu"))

thisPlot_binary_regular500 = ggplot(ageJumpList_binary_regular500, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = nbins) + geom_density(alpha = 0.2, fill = "#4060ff") + ylim(0, 2.5) + xlim(0, 2.2) + labs(x = "500 kb window age jump (bin)", y = "Distribution density", title = "500 kb window age jump (binary) in contiguous TADs (regular 500)") + theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 12, family = "Ubuntu"), axis.title.y = element_text(size = 12, family = "Ubuntu"))

thisPlot_binary_rnd05 = ggplot(ageJumpList_binary_rnd, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = nbins) + geom_density(alpha = 0.2, fill = "#4060ff") + ylim(0, 2.5) + xlim(0, 2.2) + labs(x = "TAD age jump (bin)", y = "Distribution density", title = "TAD age jump (binary) in contiguous TADs (rnd05)") + theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 12, family = "Ubuntu"), axis.title.y = element_text(size = 12, family = "Ubuntu"))

ggsave("/mnt/sexreg/temporal/geneage/plotAge/ageJump_binary_distribution_nbins=100_ensembl_apr2020_hESCCaelinn_real.png", plot = thisPlot_binary_real, height = 6, width = 6, dpi = 300, units = "in")
ggsave("/mnt/sexreg/temporal/geneage/plotAge/ageJump_binary_distribution_nbins=100_ensembl_apr2020_hESCCaelinn_rnd05.png", plot = thisPlot_binary_rnd05, height = 6, width = 6, dpi = 300, units = "in")
ggsave("/mnt/sexreg/temporal/geneage/plotAge/ageJump_binary_distribution_nbins=100_ensembl_apr2020_hESCCaelinn_regular500.png", plot = thisPlot_binary_regular500, height = 6, width = 6, dpi = 300, units = "in")


################################################
################################################ usando hESC de Tsirigos
################################################


hESCTADInsulations = readTablesInFolder("/mnt/sexreg/temporal/geneage/TADInsulation/all_files/H1_hESC-untreated-HindIII-rep1/", "*.bed")
colnames(hESCTADInsulations) = c("chr", "start", "end", "insulation")
rownames(hESCTADInsulations) = NULL
hESCTADInsulations$chr = substr(hESCTADInsulations$chr, 4, length(hESCTADInsulations$chr) - 3)
hESCTADInsulations$chr = as.character(hESCTADInsulations$chr)
hESCTADInsulations = hESCTADInsulations[with(hESCTADInsulations, order(chr, start, end)),]

library("biomaRt")
#ensembl75 = useMart(host='feb2014.archive.ensembl.org',
ensembl75 = useMart(host='apr2020.archive.ensembl.org',
						biomart='ENSEMBL_MART_ENSEMBL',
						dataset='hsapiens_gene_ensembl')
allBioMartHuman = getBM(mart = ensembl75, attributes = c("ensembl_gene_id", "wikigene_name", "chromosome_name", "start_position", "end_position", "gene_biotype"))

thisFolder = "/mnt/sexreg/temporal/geneage/"

sampleAgeFile = paste0(thisFolder, "AgesWithChrX.tsv") # converted from Caelinn's file in /data
geneAgeList = as.data.frame(read.table(sampleAgeFile, header = TRUE, sep = "\t"))
colnames(geneAgeList) = c("ensembl_gene_id", colnames(geneAgeList)[2:6])
geneAgeList = geneAgeList[,1:6]

newTADList = getTADGenesTable(allBioMartHuman, hESCTADInsulations)

geneTADAgeTable = mergeGeneTADAge(newTADList, geneAgeList)
geneTADAgeTableAgeOnly = subset(geneTADAgeTable, gene_age != "No Age Provided")
geneTADAgeTableAgeOnlyNoDups = geneTADAgeTableAgeOnly[!duplicated(geneTADAgeTableAgeOnly[, "ensembl_gene_id"]),]


# get a list {chromosome, TAD id, average age of contained genes in rank}
TADAgeList = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies)

############## binary analysis
############## everything before Sarcopterygii = 3
############## everything after (included Sarcopterygii) = 1
# note: I didn't use {0,1} because this way it was difficult to tell the difference between empty and young TADs

TADAgeList_binary = getTADAgeList(geneTADAgeTableAgeOnlyNoDups, ageEquivalencies_binary)
ageJumpList_binary = getJumpList(TADAgeList_binary, column = "meanAge")
ggplot(ageJumpList_binary, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = 20) + geom_density(alpha = 0.2, fill = "#40ff40")

# saveTADAgeGraphs(TADAgeList_binary, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_hESC_tsirigos_ensembl_apr2020", fileSuffix = "real", ymax = 3.2)

# compare with randomisation of ages
for (i in 1:5) {
	print(paste0("Generating randomisation #", i, "."))
	TADAgeList_binary_rnd = getTADAgeList(randomiseAllAges(geneTADAgeTableAgeOnlyNoDups), ageEquivalencies_binary)
	ageJumpList_binary_rnd = getJumpList(TADAgeList_binary_rnd, column = "meanAge")
	print(paste0("Saving randomisation #", i, "."))
	# saveTADAgeGraphs(TADAgeList_binary_rnd, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_hESC_ensembl_apr2020", fileSuffix = paste0("rnd0", i), ymax = 3.2)
	}

TADList_regular500 = generateRegularTADList(chromosomes_hg19, size = 500000)	
newTADList_regular500 = getTADGenesTable(allBioMartHuman, TADList_regular500)
geneTADAgeTable_regular500 = mergeGeneTADAge(newTADList_regular500, geneAgeList)
geneTADAgeTableAgeOnly_regular500 = subset(geneTADAgeTable_regular500, gene_age != "No Age Provided")
geneTADAgeTableAgeOnlyNoDups_regular500 = geneTADAgeTableAgeOnly_regular500[!duplicated(geneTADAgeTableAgeOnly_regular500[, "ensembl_gene_id"]),]

# compare with jumps for different regular windows of 500000 bases
TADAgeList_binary_regular500 = getTADAgeList(geneTADAgeTableAgeOnlyNoDups_regular500, ageEquivalencies_binary)
ageJumpList_binary_regular500 = getJumpList(TADAgeList_binary_regular500, column = "meanAge")
# saveTADAgeGraphs(TADAgeList_binary_regular500, folder = "/mnt/sexreg/temporal/geneage/plotAge/", filePrefix = "binary_hESC_ensembl_apr2020", fileSuffix = "reg500", ymax = 3.2)

# jump plots binary
nbins = 100;
thisPlot_binary_real = ggplot(ageJumpList_binary, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = nbins) + geom_density(alpha = 0.2, fill = "#4060ff") + ylim(0, 2.5) + xlim(0, 2.2) + labs(x = "TAD age jump (bin)", y = "Distribution density", title = "TAD age jump (binary) in contiguous TADs (real)") + theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 12, family = "Ubuntu"), axis.title.y = element_text(size = 12, family = "Ubuntu"))

thisPlot_binary_regular500 = ggplot(ageJumpList_binary_regular500, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = nbins) + geom_density(alpha = 0.2, fill = "#4060ff") + ylim(0, 2.5) + xlim(0, 2.2) + labs(x = "500 kb window age jump (bin)", y = "Distribution density", title = "500 kb window age jump (binary) in contiguous TADs (regular 500)") + theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 12, family = "Ubuntu"), axis.title.y = element_text(size = 12, family = "Ubuntu"))

thisPlot_binary_rnd05 = ggplot(ageJumpList_binary_rnd, aes(x = jump)) + geom_histogram(aes(y = ..density.., colour = "black", fill = "white"), colour = "black", fill = "white", bins = nbins) + geom_density(alpha = 0.2, fill = "#4060ff") + ylim(0, 2.5) + xlim(0, 2.2) + labs(x = "TAD age jump (bin)", y = "Distribution density", title = "TAD age jump (binary) in contiguous TADs (rnd05)") + theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold", family = "Ubuntu"), axis.title.x = element_text(size = 12, family = "Ubuntu"), axis.title.y = element_text(size = 12, family = "Ubuntu"))

ggsave("/mnt/sexreg/temporal/geneage/plotAge/ageJump_binary_distribution_nbins=100_ensembl_apr2020_hESCTsirigos_real.png", plot = thisPlot_binary_real, height = 6, width = 6, dpi = 300, units = "in")
ggsave("/mnt/sexreg/temporal/geneage/plotAge/ageJump_binary_distribution_nbins=100_ensembl_apr2020_hESCTsirigos_rnd05.png", plot = thisPlot_binary_rnd05, height = 6, width = 6, dpi = 300, units = "in")
ggsave("/mnt/sexreg/temporal/geneage/plotAge/ageJump_binary_distribution_nbins=100_ensembl_apr2020_hESCTsirigos_regular500.png", plot = thisPlot_binary_regular500, height = 6, width = 6, dpi = 300, units = "in")
