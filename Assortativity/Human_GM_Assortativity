#packages ----
library("igraph")
library(GenomeInfoDb)
library(GenomeInfoDbData)
library(GenomicRanges)
library("tidyverse")
library("data.table")
library(sqldf)
library(plyr)
library(dplyr)
library(RColorBrewer)
library(VertexSort)
library(biomaRt)
library(ggplot2)
library(reshape2)

#functions ----
overlap.genes <- function(Ages,DATA){
  oldw <- getOption("warn")
  options(warn = -1)
  if(!Ages$Chromosome %like% "chr"){Ages$Chromosome <- paste0("chr",Ages$Chromosome)}
  options(warn = oldw)
  if(any(Ages$Chromosome %like% "chrM")){TADs <- TADs[-which(Ages$Chromosome %like% "chrM"),]}
  if(any(Ages$Chromosome %like% "chrNT")){TADs <- TADs[-which(Ages$Chromosome %like% "chr"),]}
  TADs <- droplevels(TADs)
  AgeGRange <- makeGRangesFromDataFrame(Ages,
                                        keep.extra.columns=T,
                                        ignore.strand=FALSE,
                                        seqinfo=NULL,
                                        seqnames.field=c("Chromosome"),
                                        start.field="Gene_Start_bp",
                                        end.field=c("Gene_End_bp"),
                                        strand.field="str",
                                        starts.in.df.are.0based=FALSE)
  oldw <- getOption("warn")
  options(warn = -1)
  if(!DATA$baitChr %like% "chr"){DATA$baitChr <- paste0("chr",DATA$baitChr)}
  options(warn = oldw)
  if(any(DATA$baitChr %like% "chrM")){DATA <- DATA[-which(DATA$baitChr %like% "chrM"),]}
  if(any(DATA$oeChr %like% "chrM")){DATA <- DATA[-which(DATA$oeChr %like% "chrM"),]}
  DATA <- droplevels(DATA)
  DATAGRange <- makeGRangesFromDataFrame(DATA,
                                         keep.extra.columns=T,
                                         ignore.strand=FALSE,
                                         seqinfo=NULL,
                                         seqnames.field=c("baitChr"),
                                         start.field="baitStart",
                                         end.field=c("baitEnd"),
                                         strand.field="strand",
                                         starts.in.df.are.0based=FALSE)
  
  #Overlapping genes with DATA_map data ----
  hits <- findOverlaps(DATAGRange, AgeGRange) # Finds all overlaps
  bait_match_hit <- data.frame(DATAGRange[queryHits(hits)] ,stringsAsFactors=T)
  CS_match_hit <- data.frame(AgeGRange[subjectHits(hits)]  ,stringsAsFactors=T)
  match_hit <- data.frame(DATAGRange[queryHits(hits)] , data.frame(mcols(AgeGRange[subjectHits(hits)] )), stringsAsFactors=T)
  
  #Update baitName with ENSEMBL ID name ----
  baitNames <- match_hit[,c("baitID","Gene","GeneAge")]
  baitNames <- unique(baitNames)
  colnames(baitNames) <- c("baitID","bait_Name","bait_Age")
  
  DATA_Ensembl <- merge(DATA,baitNames,by="baitID",all=TRUE)
  DATA_Ensembl <- unique(DATA_Ensembl)
  
  oldw <- getOption("warn")
  options(warn = -1)
  if(!DATA$oeChr %like% "chr"){DATA$oeChr <- paste0("chr",DATA$oeChr)}
  options(warn = oldw)
  if(any(DATA$oeChr %like% "chrM")){DATA <- DATA[-which(DATA$oeChr %like% "chrM"),]}
  if(any(DATA$oeChr %like% "chrM")){DATA <- DATA[-which(DATA$oeChr %like% "chrM"),]}
  DATA <- droplevels(DATA)
  oeDATAGRange <- makeGRangesFromDataFrame(DATA,
                                           keep.extra.columns=T,
                                           ignore.strand=FALSE,
                                           seqinfo=NULL,
                                           seqnames.field=c("oeChr"),
                                           start.field="oeStart",
                                           end.field=c("oeEnd"),
                                           strand.field="strand",
                                           starts.in.df.are.0based=FALSE)
  #Overlapping oe with DATA_map data ----
  hits <- findOverlaps(oeDATAGRange, AgeGRange) # Finds all overlaps
  bait_match_hit <- data.frame(oeDATAGRange[queryHits(hits)] ,stringsAsFactors=T)
  CS_match_hit <- data.frame(AgeGRange[subjectHits(hits)]  ,stringsAsFactors=T)
  oematch_hit <- data.frame(oeDATAGRange[queryHits(hits)] , data.frame(mcols(AgeGRange[subjectHits(hits)] )), stringsAsFactors=T)
  
  oeNames <- oematch_hit[,c("oeID","Gene","GeneAge")]
  oeNames <- unique(oeNames)
  colnames(oeNames) <- c("oeID","oe_Name","oe_Age")
  
  DATA_Ensembl <- merge(DATA_Ensembl,oeNames,by="oeID",all = TRUE)
  DATA_Ensembl <- unique(DATA_Ensembl)
  
  DATA_Ensembl$bait_Name <- as.character(DATA_Ensembl$bait_Name)
  DATA_Ensembl$bait_Age <- as.character(DATA_Ensembl$bait_Age)
  DATA_Ensembl$oe_Name <- as.character(DATA_Ensembl$oe_Name)
  DATA_Ensembl$oe_Age <- as.character(DATA_Ensembl$oe_Age)
  
  name_tags=c("bait_Name","oe_Name")
  id_tags=c("baitID","oeID")
  for(runs in 1:2){
    #Set arguments
    name_tag=name_tags[runs]
    
    id_tag=id_tags[runs]
    #Boolean vector s.t. TRUE is the position of NA bait name
    bait_Name_bol=is.na(DATA_Ensembl[,name_tag])
    #Extract the bait ids having a NA bait name
    bait_IDS=DATA_Ensembl[bait_Name_bol,id_tag]
    #Create new bait names for replacing the TRUE ones based on their bait ids
    new_bait_Names=paste("Non-genic",bait_IDS)
    #Replace
    DATA_Ensembl[bait_Name_bol,name_tag]=new_bait_Names
  }
  
  
  DATA_Ensembl$bait_Age[is.na(DATA_Ensembl$bait_Age)] <- "Non-genic"
  DATA_Ensembl$oe_Age[is.na(DATA_Ensembl$oe_Age)] <- "Non-genic"
  
  value = DATA_Ensembl
  
  
}

young.network.frags <- function(A){
  B <- A
  bait <- B[,c("baitID","bait_Name","bait_Age")]
  colnames(bait) <- c("ID","Name","Age")
  oe <- B[,c("oeID","oe_Name","oe_Age")]
  colnames(oe) <- c("ID","Name","Age")
  D <- rbind(bait,oe)
  D <- unique(D)
  D <- D[order(match(D[,3],RankOrder[c(11,10,9,8,7,6,5,4,3,2,1,12,13),1])),]
  D <-  distinct(D,ID, .keep_all = TRUE)
  value = D
}

young.network <- function(A,B){
  A <- subset(A,select=-c(bait_Name,bait_Age,oe_Name,oe_Age))
  D <- merge(A,B,by.x="baitID",by.y="ID",all.x=FALSE)
  colnames(D)[(ncol(D)-1):ncol(D)] <- c("bait_Name","bait_Age")
  D <- merge(D,B,by.x="oeID",by.y="ID",all.x=FALSE)
  colnames(D)[(ncol(D)-1):ncol(D)] <- c("oe_Name","oe_Age")
  value = unique(D)
}

create.network <- function(DATA,DATAFRAGS){
  f_network=DATA[,c("baitID","oeID")]
  indx <- !duplicated(t(apply(f_network, 1, sort)))
  f_network=f_network[indx, ]
  f1 <- as.data.frame(f_network[,1])
  f2 <- as.data.frame(f_network[,2])
  colnames(f1) <- "nodes"
  colnames(f2) <- "nodes"
  vec_edges = rbind(f1,f2)
  nodes <- unique(vec_edges)
  nodes <- as.data.frame(nodes)
  nodes <- merge(nodes,DATAFRAGS[,c("ID","Number")],by.x="nodes",by.y="ID",all.y=FALSE)
  net <- graph_from_data_frame(d=f_network, vertices=nodes, directed=F)
  value = net}

calculate.assortativity <- function(DATA,DATAFRAGS){
  f_network=DATA[,c("baitID","oeID")]
  indx <- !duplicated(t(apply(f_network, 1, sort)))
  f_network=f_network[indx, ]
  f1 <- as.data.frame(f_network[,1])
  f2 <- as.data.frame(f_network[,2])
  colnames(f1) <- "nodes"
  colnames(f2) <- "nodes"
  vec_edges = rbind(f1,f2)
  nodes <- unique(vec_edges)
  nodes <- as.data.frame(nodes)
  nodes <- merge(nodes,DATAFRAGS[,c("ID","Number")],by.x="nodes",by.y="ID",all.y=FALSE)
  net <- graph_from_data_frame(d=f_network, vertices=nodes, directed=F)
  value = assortativity.nominal(net, types=V(net)$Number)
}

gene.age.assortativity <- function(DATA,DATAFRAGS,FILENAME,CELLTYPE){
  GeneAssortativityMatrix <- data.frame()
  GeneAssortativityMatrix[1,1] <- "Full Network"
  GeneAssortativityMatrix[2:13,1]<- paste(RankOrder[1:12,1])
  
  DATAFRAGS$ID <- as.character(DATAFRAGS$ID)
  
  DATAFRAGS <- merge(DATAFRAGS,RankOrder[,1:2],by.x="Age",by.y="Rank")
  colnames(DATAFRAGS)[ncol(DATAFRAGS)] <- "Number"
  
  DATA<- DATA[-(which(DATA$bait_Name %like% "Non-genic" | DATA$oe_Name %like% "Non-genic")),]
  DATAFRAGS <- DATAFRAGS[-which(DATAFRAGS$Age == "Non-genic"),]
  net <- create.network(DATA,DATAFRAGS)
  GeneAssortativityMatrix[1,ncol(GeneAssortativityMatrix) +1]  <- assortativity.nominal(net, types=V(net)$Number)
  
  colnames(GeneAssortativityMatrix) <- c("Age","Assortativity")
  
  for (k in 1:12){
    for(i in 1:nrow(DATAFRAGS)){
      DATAFRAGS[i,"Number"] <- ifelse(DATAFRAGS[i,"Age"]  == paste(RankOrder[k,1]), 1,100)
    }
    net <- create.network(DATA,DATAFRAGS)
    GeneAssortativityMatrix[(k+1),"Assortativity"]  <- assortativity.nominal(net, types=V(net)$Number)
  }
  rm(i)
  rownames(GeneAssortativityMatrix) <- GeneAssortativityMatrix[,1]
  save(GeneAssortativityMatrix,file=paste0(path,FILENAME,".rData"))
  
  AgeColours <- c("#FF0000","#FF6000","#FFBF00","#DFFF00","#80FF00","#20FF00","#00FF40","#00FF9F","#00FFFF","#009FFF","#DF00FF","grey70","grey 40")
  pdf(paste0(path,FILENAME,".pdf"),width=7 ,height= 7)
  par(mfrow=c(1,1),mar=c(0,4,2,2))
  barplot(t(as.matrix(GeneAssortativityMatrix[,2])),beside=TRUE,xaxt="n",col=c("black",AgeColours),main=paste(CELLTYPE,"assortativity scores"),ylab="Assortativity scores",ylim=c(-0.43,0.6))
  abline(h=0)
  legend_order <- matrix(c(1:13,NA,NA),ncol=3,byrow = FALSE)
  legend("bottom",inset = c(0,0.05) ,fill=c("black",AgeColours[1:12])[legend_order],bty="n",legend= c(row.names(GeneAssortativityMatrix))[legend_order],ncol=3,border=c(rep("black",13),NA,NA))
  dev.off()
  
  value = GeneAssortativityMatrix
}

tad.assortativity <- function(DATA,DATAFRAGS,FILENAME,CELLTYPE){
  #Read in TADS ----
  if(TADFILE %like% ".xls"){  
    TADs <- readxl::read_excel(paste0(path,TADFILE))}
  if (TADFILE %like% ".bed"){
    TADs <- as.data.frame(read.delim(paste0(path,TADFILE),header=T))}
  if (TADFILE %like% ".tsv"){
    TADs <-  read.table(paste0(path,TADFILE),header=T)}
  
  colnames(TADs) <- c("chr","start","end")
  TADs$TAD <- paste("TAD",1:nrow(TADs))
  TADs <- TADs[, c("chr","start","end","TAD")]
  
  #Assigning fragments to TADs ----
  oldw <- getOption("warn")
  options(warn = -1)
  if(!TADs$chr %like% "chr"){TADs$chr <- paste0("chr",TADs$chr)}
  options(warn = oldw)
  TADGRange <- makeGRangesFromDataFrame(TADs,
                                        keep.extra.columns=T,
                                        ignore.strand=FALSE,
                                        seqinfo=NULL,
                                        seqnames.field=c("chr"),
                                        start.field="start",
                                        end.field=c("end"),
                                        strand.field="strand",
                                        starts.in.df.are.0based=FALSE)
  oldw <- getOption("warn")
  options(warn = -1)
  if(!DATA$baitChr %like% "chr"){DATA$baitChr <- paste0("chr",DATA$baitChr)}
  options(warn = oldw)
  MapGRange <- makeGRangesFromDataFrame(DATA,
                                        keep.extra.columns=T,
                                        ignore.strand=FALSE,
                                        seqinfo=NULL,
                                        seqnames.field=c("baitChr"),
                                        start.field="baitStart",
                                        end.field=c("baitEnd"),
                                        strand.field="strand",
                                        starts.in.df.are.0based=FALSE)
  
  hits <- findOverlaps(MapGRange, TADGRange) # Finds all overlaps
  bait_match_hit <- data.frame(MapGRange[queryHits(hits)] ,stringsAsFactors=T)
  CS_match_hit <- data.frame(TADGRange[subjectHits(hits)]  ,stringsAsFactors=T)
  match_hit <- data.frame(MapGRange[queryHits(hits)] , data.frame(mcols(TADGRange[subjectHits(hits)] )), stringsAsFactors=T)
  
  bait_TAD <- match_hit[,c("baitID","bait_Name","bait_Age","TAD")]
  bait_TAD <- unique(bait_TAD)
  colnames(bait_TAD) <- c("baitID","bait_Name","bait_Age","bait_TAD")
  
  DATA <- merge(DATA,bait_TAD,by=c("baitID","bait_Name","bait_Age"),all=TRUE)
  
  
  oldw <- getOption("warn")
  options(warn = -1)
  if(!DATA$oeChr %like% "chr"){DATA$oeChr <- paste0("chr",DATA$oeChr)}
  options(warn = oldw)
  oeMapGRange <- makeGRangesFromDataFrame(DATA,
                                          keep.extra.columns=T,
                                          ignore.strand=FALSE,
                                          seqinfo=NULL,
                                          seqnames.field=c("oeChr"),
                                          start.field="oeStart",
                                          end.field=c("oeEnd"),
                                          strand.field="strand",
                                          starts.in.df.are.0based=FALSE)
  hits <- findOverlaps(oeMapGRange, TADGRange) # Finds all overlaps
  bait_match_hit <- data.frame(oeMapGRange[queryHits(hits)] ,stringsAsFactors=T)
  CS_match_hit <- data.frame(TADGRange[subjectHits(hits)]  ,stringsAsFactors=T)
  oematch_hit <- data.frame(oeMapGRange[queryHits(hits)] , data.frame(mcols(TADGRange[subjectHits(hits)] )), stringsAsFactors=T)
  
  oe_TAD <- oematch_hit[,c("oeID","oe_Name","oe_Age","TAD")]
  oe_TAD <- unique(oe_TAD)
  colnames(oe_TAD) <- c("oeID","oe_Name","oe_Age","oe_TAD")
  DATA <- merge(DATA,oe_TAD,by=c("oeID","oe_Name","oe_Age"),all = TRUE)
  
  DATA[is.na(DATA)] <- paste("No TAD")
  
  #Splitting network into intra-TAD, inter-TAD and inter-chromosomal interactions -----
  DATA <- DATA[-(which(DATA$bait_Name %like% "Non-genic" | DATA$oe_Name %like% "Non-genic")),]
  DATAFRAGS <- merge(DATAFRAGS,RankOrder,by.x="Age",by.y="Rank")
  colnames(DATAFRAGS)[ncol(DATAFRAGS)] <- "Number"
  DATAFRAGS <- DATAFRAGS[-which(DATAFRAGS$Age == "Non-genic"),]
  
  DATA$Interaction <- paste(DATA$baitID, "-",DATA$oeID)
  Intra_TAD <- DATA[which(DATA$bait_TAD == DATA$oe_TAD),]
  if("No TAD" %in% Intra_TAD$bait_TAD){ Intra_TAD <- Intra_TAD[-(which(Intra_TAD$bait_TAD == "No TAD")),]}
  Inter_TAD <- DATA[-(which(DATA$Interaction %in% Intra_TAD$Interaction)),]
  Inter_TAD <- Inter_TAD[(which(Inter_TAD$baitChr == Inter_TAD$oeChr)),]
  InterChromo <- DATA[-which(DATA$baitChr == DATA$oeChr),]
  
  Intra_TAD_Frags <- DATAFRAGS[which(DATAFRAGS$ID %in% Intra_TAD$baitID|DATAFRAGS$ID %in% Intra_TAD$oeID),]
  Inter_TAD_Frags <- DATAFRAGS[which(DATAFRAGS$ID %in% Inter_TAD$baitID|DATAFRAGS$ID %in% Inter_TAD$oeID),]
  InterChromo_Frags <- DATAFRAGS[which(DATAFRAGS$ID %in% InterChromo$baitID|DATAFRAGS$ID %in% InterChromo$oeID),]
  
  TADAssortativityMatrix <- data.frame()
  TADAssortativityMatrix[1:4,1] <- c("Full Network","Intra-TAD","Inter-TAD","Inter-Chromosomal")
  
  net <- create.network(DATA,DATAFRAGS)
  TADAssortativityMatrix[1,2]  <- assortativity.nominal(net, types=V(net)$Number)
  net <- create.network(Intra_TAD,Intra_TAD_Frags)
  TADAssortativityMatrix[2,2]  <- assortativity.nominal(net, types=V(net)$Number)
  net <- create.network(Inter_TAD,Inter_TAD_Frags)
  TADAssortativityMatrix[3,2]  <- assortativity.nominal(net, types=V(net)$Number)
  net <- create.network(InterChromo,InterChromo_Frags)
  TADAssortativityMatrix[4,2]  <- assortativity.nominal(net, types=V(net)$Number)
  
  colnames(TADAssortativityMatrix) <- c("InteractionType","Assortativity")
  rownames(TADAssortativityMatrix) <- TADAssortativityMatrix[,1]
  
  pdf(paste0(path,FILENAME,".pdf"),width=7 ,height= 7)
  barplot(t(as.matrix(TADAssortativityMatrix[,2])),beside=TRUE,main=paste(CELLTYPE,"TAD assortativity scores"),ylab="Assortativity scores",ylim=c(-0.1,0.2),names=TADAssortativityMatrix[,1])
  abline(h=0)
  dev.off()
  
  save(TADAssortativityMatrix,file=paste0(path,FILENAME,".rData"))
  value=TADAssortativityMatrix
}

#files -----
#setwd("E:/")

path = "E:/PAPER_FINAL_CODE/Assortativity_FINAL/Human_GM"
#INTERACTION MAP FROM: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5123897/
MAP = "/PCHiC_peak_matrix_cutoff5.tsv"
GENEAGE = "/HumanAges_v75.csv"
TADFILE = "/GSE63525_GM12878_primary+replicate_Arrowhead_domainlist_sorted_noNested.txt"

Map <- read.table(paste0(path,MAP),header=T)
Map <- Map[which(Map$nB > 5),c("baitChr","baitStart","baitEnd","baitID","oeChr","oeStart","oeEnd","oeID")]

genes <- biomaRt::useEnsembl(biomart="ensembl",dataset = "hsapiens_gene_ensembl", version=75)
Coordinates <- biomaRt::getBM(mart = genes, filters = 'biotype', values = 'protein_coding' ,attributes =c('ensembl_gene_id','start_position','end_position','chromosome_name','hgnc_symbol') )
colnames(Coordinates) <- c("Gene","Gene_Start_bp","Gene_End_bp","Chromosome","Symbol")

Ages <- read.csv(file=paste0(path,GENEAGE), na.strings=c("unclear","NA"),header=T)
Ages <- Ages[,c("GeneID","GeneAge")]

TADs <- as.data.frame(read.delim(paste0(path,TADFILE),header=T))

RankOrder <- data.frame(c("FungiMetazoa","Bilateria","Chordata","Euteleostomi","Sarcopterygii","Tetrapoda","Amniota","Mammalia","Theria","Eutheria","Primate","No Age Provided","Non-genic"))
colnames(RankOrder) <- "Rank"
RankOrder$Order <- c(1:13)
RankOrder$Rank <- as.character(RankOrder$Rank)
save(RankOrder,file=paste0(path,"/RankOrder.rData"))

#Overlapping gene ages and names with fragments ----
Ages <- merge(Coordinates,Ages,by.x="Gene",by.y="GeneID",all=TRUE)
Ages <- Ages[,c("Gene","GeneAge","Gene_Start_bp","Gene_End_bp","Chromosome","Symbol")]
Ages$GeneAge <- as.character(Ages$GeneAge)
chromosomes <- c(1:22,'X')
Ages <- Ages[which(Ages$Chromosome %in% chromosomes),]

Ages[is.na(Ages)] <- "No Age Provided"
rm(Coordinates)

for(i in 1:nrow(Ages)){
  if(Ages[i,"GeneAge"] == "Simiiformes") {Ages[i,"GeneAge"] <- "Primate" }
  if(Ages[i,"GeneAge"] == "Catarrhini") {Ages[i,"GeneAge"] <- "Primate" }
  if(Ages[i,"GeneAge"] == "Hominoidea") {Ages[i,"GeneAge"] <- "Primate" }
  if(Ages[i,"GeneAge"] == "Hominidae") {Ages[i,"GeneAge"] <- "Primate" }
  if(Ages[i,"GeneAge"] == "HomoPanGorilla") {Ages[i,"GeneAge"] <- "Primate" }
  if(Ages[i,"GeneAge"] == "HomoSapiens") {Ages[i,"GeneAge"] <- "Primate" }
}


GM_Ensembl <- overlap.genes(Ages,Map)
GM_Ensembl <- GM_Ensembl[,c("baitID","baitChr","baitStart","baitEnd","bait_Name","bait_Age","oeID","oeChr","oeStart","oeEnd","oe_Name","oe_Age")]

GM_Young_Frags <- young.network.frags(GM_Ensembl)
GM_Young <- young.network(GM_Ensembl,GM_Young_Frags)
save(GM_Young,file=paste0(path,"/GM_Young.rData"))
save(GM_Young_Frags,file=paste0(path,"/GM_Young_Frags.rData"))
rm(Ages,GM_Ensembl,Map,i)

#Assortativity time -----

GeneAssortativity <- gene.age.assortativity(GM_Young,GM_Young_Frags,"/GM_Gene_Assortativity","GM cell line")

TADAssortativity <- tad.assortativity(GM_Young,GM_Young_Frags,"/GM_TAD_Assortativity","GM cell line")

#Fused TADs
TADFILE = "/GSE63525_GM12878_primary+replicate_Arrowhead_domainlist_sorted_noNested_fused.tsv"
TADs <- read.delim(paste0(path,TADFILE))
FusedAssortativity <- tad.assortativity(GM_Young,GM_Young_Frags,"/GM_Fused_Assortativity","GM cell line Fused")

FusedDiff <- data.frame(TADAssortativity[,2],FusedAssortativity[,2],(TADAssortativity[,2] - FusedAssortativity[,2]))
colnames(FusedDiff) <- c("Original","Fused","Difference")
rownames(FusedDiff) <- rownames(TADAssortativity)
save(FusedDiff,file=paste0(path,"/Fused_TAD_differences.rData"))

#Random TADs
files = list.files(path = path,pattern="replicate_Arrowhead_domainlist_sorted_noNested_rnd",recursive=TRUE)
RandomTADs <- data.frame(matrix(NA,4,length(files)))
for(i in 1:length(files)){
  TADFILE <-paste0("/",files[i])
  RandomTADs[,i] <-  tad.assortativity(GM_Young,GM_Young_Frags,paste0("/RandomTADs/GM_rand",i,"_TAD_Assortativity"),"naive CD8+ T cell randomised")[,2]
}
save(RandomTADs,file=paste0(path,"/RandomTADs.rData"))
rowMeans(RandomTADs)

Assort <- data.frame(Original = TADAssortativity[,2],RandomMean = rowMeans(RandomTADs),sd = c(sd(RandomTADs[1,]),sd(RandomTADs[2,]),sd(RandomTADs[3,]),sd(RandomTADs[4,])),Difference= TADAssortativity[,2] -  rowMeans(RandomTADs))
rownames(Assort) <- c("Full network","Intra-TAD","Inter-TAD","Interchromosomal")
save(Assort,file=paste0(path,"/Random_TAD_differences.rData"))

#Final Graph
All <- as.data.table(merge(FusedDiff,Assort,by="Original"))
All <- t(All[,c(1,2,4)])
colnames(All) <- c("Interchromosomal","Inter-TAD","Full network","Intra-TAD")
row.names(All) <- c("Original TADs","Fused TADs","Randomised TADs (mean)")
All <- All[,c(3,4,2)]

All <- reshape2::melt(All,id.vars=c("Type"))
All$sd <- NA
All[6,"sd"] <- Assort[2,3]
All[9,"sd"] <- Assort[3,3]

print(allTADs <- ggplot(data=All,aes(y=value,x=Var2,fill=Var1))+
        geom_bar(stat="identity",position="dodge")+
        geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.5,
                      position=position_dodge(.9)) +
        labs(y="Assortativity score",x="Interaction Type", title = "Assortativity Scores for different interaction types (human GM cell line network)
             when TADs are unchanged, fused, and randomised", fill= "TAD Type") )

pdf(file = paste0(path,"/GM_All_TAD_Assortativity.pdf"),width=8,height=8)
allTADs
dev.off()
